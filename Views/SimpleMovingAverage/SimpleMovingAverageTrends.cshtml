@model OptionsTechnicalAnalysis.Models.SmaTrendData
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_Layout";
}

<style>
    #twoHundredDaySmaWithClosePriceTable {
    }

        #twoHundredDaySmaWithClosePriceTable td th {
        }

    .smaTrendContainerObject {
        display: none;
    }

    #twoHundredDaySmaWithCandleStickChart {
        background-color: black;
    }

    #fiftyDaySmaWithCandleStickChart {
        background-color: black;
    }

    #twentyDaySmaWithCandleStickChart {
        background-color: black;
    }

    #tenDaySmaWithCandleStickChart {
        background-color: black;
    }

    #twentyDayFiftyDaySmaWithCandleStickChart {
        background-color: black;
    }

    .yrule {
        fill: lightgray;
    }

    .xrule text {
        fill: lightgray;
    }
</style>

<div class="container-fluid body-content">
    <div class="row">
        <h1><b><u>Simple Moving Average Trends</u></b></h1>
    </div>
    <div class="row" style="margin-top:25px;">
        <form method="post" action="/SimpleMovingAverage/SimpleMovingAverageTrends">
            <div class="row">
                <label for="symbol" class="col-md-1">Search:</label>
                <div class="col-md-2">
                    <input class="form-control" name="symbol" type="text" placeholder="Enter Stock Symbol" />
                </div>
                <div class="col-md-1">
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </div>
        </form>
    </div>
    <div class="row" style="margin-top:40px;">
        <div class="col-md-5">
            <h3><b>@Model.DailyTimeSeriesData.metaData.Symbol.ToUpper() SMA Trends</b></h3>
        </div>
    </div>
    <div id="smaTrendContainer">
        <div id="class1" class="smaTrendContainerObjectLink">
            <a href="#"><b>200-day SMA Trends</b></a>
        </div>
        <div class="row smaTrendContainerObject" style="margin-top: 20px">
            <div class="col-md-4" style="height: 600px; overflow:scroll; background-color:white;">
                <table id="twoHundredDaySmaWithClosePriceTable" class="table table-striped">
                    <tr>
                        <th>Date</th>
                        <th>Two Hundred Day SMA</th>
                        <th>High Price for Day</th>
                        <th>Closing Price</th>
                    </tr>
                    @*note about how I accessed the elements below: code is likely O(n^2) SINCE Dictionary does not allow access to elements by position*@
                    @for (int i = 0; i != 100; ++i)
                    {
                        <tr>
                            <td class="dateForTwoHundredDaySmaTable">@Model.TwoHundredDaySma.Data.ElementAt(i).Key</td>
                            <td class="smaForTwoHundredDayTable">@Model.TwoHundredDaySma.Data.ElementAt(i).Value.Sma</td>
                            <td class="highForTwoHundredDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high</td>
                            <td class="closeForTwoHundredDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="col-md-8" style="padding-left: 40px;">
                <div id="twoHundredDaySmaWithCandleStickChart"></div>
            </div>
        </div>
        <div id="class2" class="smaTrendContainerObjectLink">
            <a href="#"><b>50-day SMA Trends</b></a>
        </div>
        <div class="row smaTrendContainerObject" style="margin-top: 20px">
            <div class="col-md-4" style="height: 600px; overflow:scroll; background-color:white;">
                <table id="fiftyDaySmaWithClosePriceTable" class="table table-striped">
                    <tr>
                        <th>Date</th>
                        <th>Fifty Day SMA</th>
                        <th>High Price for Day</th>
                        <th>Closing Price</th>
                    </tr>
                    @*note about how I accessed the elements below: code is likely O(n^2) SINCE Dictionary does not allow access to elements by position*@
                    @for (int i = 0; i != 100; ++i)
                    {
                        <tr>
                            <td class="dateForFiftyDaySmaTable">@Model.FiftyDaySma.Data.ElementAt(i).Key</td>
                            <td class="smaForFiftyDayTable">@Model.FiftyDaySma.Data.ElementAt(i).Value.Sma</td>
                            <td class="highForFiftyDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high</td>
                            <td class="closeForFiftyDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="col-md-8" style="padding-left: 40px;">
                <div id="fiftyDaySmaWithCandleStickChart"></div>
            </div>
        </div>
        <div id="class3" class="smaTrendContainerObjectLink">
            <a href="#"><b>20-day SMA Trends</b></a>
        </div>
        <div class="row smaTrendContainerObject" style="margin-top: 20px">
            <div class="col-md-4" style="height: 600px; overflow:scroll; background-color:white;">
                <table id="twentyDaySmaWithClosePriceTable" class="table table-striped">
                    <tr>
                        <th>Date</th>
                        <th>Twenty Day SMA</th>
                        <th>High Price for Day</th>
                        <th>Closing Price</th>
                    </tr>
                    @*note about how I accessed the elements below: code is likely O(n^2) SINCE Dictionary does not allow access to elements by position*@
                    @for (int i = 0; i != 100; ++i)
                    {
                        <tr>
                            <td class="dateForTwentyDaySmaTable">@Model.TwentyDaySma.Data.ElementAt(i).Key</td>
                            <td class="smaForTwentyDayTable">@Model.TwentyDaySma.Data.ElementAt(i).Value.Sma</td>
                            <td class="highForTwentyDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high</td>
                            <td class="closeForTwentyDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="col-md-8" style="padding-left: 40px;">
                <div id="twentyDaySmaWithCandleStickChart"></div>
            </div>
        </div>
        <div id="class4" class="smaTrendContainerObjectLink">
            <a href="#"><b>10-day SMA Trends</b></a>
        </div>
        <div class="row smaTrendContainerObject" style="margin-top: 20px">
            <div class="col-md-4" style="height: 600px; overflow:scroll; background-color:white;">
                <table id="tenDaySmaWithClosePriceTable" class="table table-striped">
                    <tr>
                        <th>Date</th>
                        <th>Ten Day SMA</th>
                        <th>High Price for Day</th>
                        <th>Closing Price</th>
                    </tr>
                    @*note about how I accessed the elements below: code is likely O(n^2) SINCE Dictionary does not allow access to elements by position*@
                    @for (int i = 0; i != 100; ++i)
                    {
                        <tr>
                            <td class="dateForTenDaySmaTable">@Model.TenDaySma.Data.ElementAt(i).Key</td>
                            <td class="smaForTenDayTable">@Model.TenDaySma.Data.ElementAt(i).Value.Sma</td>
                            <td class="highForTenDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high</td>
                            <td class="closeForTenDayTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="col-md-8" style="padding-left: 40px;">
                <div id="tenDaySmaWithCandleStickChart"></div>
            </div>
        </div>
        <div id="class4" class="smaTrendContainerObjectLink">
            <a href="#"><b>20-day and 50-day SMA Trends</b></a>
        </div>
        <div class="row smaTrendContainerObject" style="margin-top: 20px">
            <div class="col-md-4" style="height: 600px; overflow:scroll; background-color:white;">
                <table id="twentyDayFiftyDaySmaWithClosePriceTable" class="table table-striped">
                    <tr>
                        <th>Date</th>
                        <th>Twenty Day SMA</th>
                        <th>Fifty Day SMA</th>
                        <th>Closing Price</th>
                    </tr>
                    @*note about how I accessed the elements below: code is likely O(n^2) SINCE Dictionary does not allow access to elements by position*@
                    @for (int i = 0; i != 100; ++i)
                    {
                        <tr>
                            <td class="dateFortwentyDayFiftyDaySmaSmaTable">@Model.TwentyDaySma.Data.ElementAt(i).Key</td>
                            <td class="smaTwentyFortwentyDayFiftyDaySmaTable">@Model.TwentyDaySma.Data.ElementAt(i).Value.Sma</td>
                            <td class="smaFiftyFortwentyDayFiftyDaySmaTable">@Model.FiftyDaySma.Data.ElementAt(i).Value.Sma</td>
                            <td class="closeFortwentyDayFiftyDaySmaTable">@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="col-md-8" style="padding-left: 40px;">
                <div id="twentyDayFiftyDaySmaWithCandleStickChart"></div>
            </div>
        </div>
    </div>
</div>

<script src="https://d3js.org/d3.v4.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        //toggle on click
        $('.smaTrendContainerObjectLink').click(function () {
            $(this).next('.smaTrendContainerObject').toggle(400);
        });
    });

    //***Constant variables between all Candle Stick Charts w/ Sma
    //keep in mind when assigning the width that we are using bootstrap above and each column is approximately 95px
    var width = 700;
    var height = 500;
    var margin = 50;

    var y = d3.scaleLinear().range([height - margin, margin]);

    var x = d3.scaleTime().range([margin, width - margin]);

    //y for the line- not being used
    var y1 = d3.scaleLinear().range([height - margin, margin]);
    //***End Constant variables between all Candle Stick Charts w/ Sma

    //***change the color of the closing price depending on whether it is higher or lower than the 200-day sma***
    var closeForTwoHundredDayTableTds = document.getElementsByClassName("closeForTwoHundredDayTable");
    var smaForTwoHundredDayTableTds = document.getElementsByClassName("smaForTwoHundredDayTable");

    for (var i = 0; i != closeForTwoHundredDayTableTds.length; ++i) {
        if (smaForTwoHundredDayTableTds[i].innerHTML < closeForTwoHundredDayTableTds[i].innerHTML) {
            closeForTwoHundredDayTableTds[i].style.color = "lightgreen";
        }
        else {
            closeForTwoHundredDayTableTds[i].style.color = "red";
        }

    } //***end 200-day sma color change***

    //***start candle stick chart for Two Hundred Day trends- Based on Daily Time Series Data***
    var twoHundredDayCandleStickChart = [];

    //pulling from 2 properties so must do this way
    @for (int i = 0; i != 100; ++i)
        {
            @:twoHundredDayCandleStickChart.push({date: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Key', high: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high', low: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.low', open: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.open', close: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close', sma: '@Model.TwoHundredDaySma.Data.ElementAt(i).Value.Sma'})
        }

        //line for the sma
        var line1 = d3.line()
            .x(function (d) { return x(d["date"]); })
            .y(function (d) { return y(d["sma"]); });

        var chart = d3.select("#twoHundredDaySmaWithCandleStickChart")
            .append("svg")
            .attr("class", "chart")
            .attr("width", width)
            .attr("height", height);

        //title
        chart.append("text")
            .attr("x", (width / 2))
            .attr("y", (margin / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("fill", "white")
            .style("text-decoration", "underline")
            .text("Candle Stick Chart With 200-day Sma");

        //since using 2 datasets find absolute min and max for y domain
        var minForTwoHundredTimeSeriesData = d3.min(twoHundredDayCandleStickChart.map(function (x) { return x["low"]; }));
        var maxForTwoHundredDayTimeSeriesData = d3.max(twoHundredDayCandleStickChart.map(function (x) { return x["high"]; }));
        var minForTwoHundredSma = d3.min(twoHundredDayCandleStickChart.map(function (x) { return x["sma"]; }));
        var maxForTwoHundredDaySma = d3.max(twoHundredDayCandleStickChart.map(function (x) { return x["sma"]; }));

        var finalMinforTwoHundredDayTrendDomain = (minForTwoHundredTimeSeriesData > minForTwoHundredSma ? minForTwoHundredSma : minForTwoHundredTimeSeriesData);
        var finalMaxforTwoHundredDayTrendDomain = (maxForTwoHundredDayTimeSeriesData > maxForTwoHundredDaySma ? maxForTwoHundredDayTimeSeriesData : maxForTwoHundredDaySma);

        buildChart(twoHundredDayCandleStickChart, finalMaxforTwoHundredDayTrendDomain, finalMinforTwoHundredDayTrendDomain, chart, line1);
    //***end candle stick chart for Two Hundred Day trends- Based on Daily Time Series Data***

    //***change the color of the closing price depending on whether it is higher or lower than the 50-day sma***
        var closeForFiftyDayTableTds = document.getElementsByClassName("closeForFiftyDayTable");
    var smaForFiftyDayTableTds = document.getElementsByClassName("smaForFiftyDayTable");

    for (var i = 0; i != closeForFiftyDayTableTds.length; ++i) {
        if (smaForFiftyDayTableTds[i].innerHTML < closeForFiftyDayTableTds[i].innerHTML) {
            closeForFiftyDayTableTds[i].style.color = "lightgreen";
        }
        else {
            closeForFiftyDayTableTds[i].style.color = "red";
        }

    } //***end 50-day sma color change***

        //***start candle stick chart for Fifty Day trends- Based on Daily Time Series Data***
    var fiftyDayCandleStickChart = [];

    //pulling from 2 properties so must do this way
    @for (int i = 0; i != 100; ++i)
        {
            @:fiftyDayCandleStickChart.push({date: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Key', high: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high', low: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.low', open: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.open', close: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close', sma: '@Model.FiftyDaySma.Data.ElementAt(i).Value.Sma'})
        }

        //line for the sma
        var lineFiftyDaySma = d3.line()
            .x(function (d) { return x(d["date"]); })
            .y(function (d) { return y(d["sma"]); });

        var chartFiftyDaySma = d3.select("#fiftyDaySmaWithCandleStickChart")
            .append("svg")
            .attr("class", "chart")
            .attr("width", width)
            .attr("height", height);

        //title
        chartFiftyDaySma.append("text")
            .attr("x", (width / 2))
            .attr("y", (margin / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("fill", "white")
            .style("text-decoration", "underline")
            .text("Candle Stick Chart With 50-day Sma");

        //since using 2 datasets find absolute min and max for y domain
        var minForFiftyTimeSeriesData = d3.min(fiftyDayCandleStickChart.map(function (x) { return x["low"]; }));
        var maxForFiftyDayTimeSeriesData = d3.max(fiftyDayCandleStickChart.map(function (x) { return x["high"]; }));
        var minForFiftySma = d3.min(fiftyDayCandleStickChart.map(function (x) { return x["sma"]; }));
        var maxForFiftyDaySma = d3.max(fiftyDayCandleStickChart.map(function (x) { return x["sma"]; }));

        var finalMinforFiftyTrendDomain = (minForFiftyTimeSeriesData > minForFiftySma ? minForFiftySma : minForFiftyTimeSeriesData);
        var finalMaxforFiftyDayTrendDomain = (maxForFiftyDayTimeSeriesData > maxForFiftyDaySma ? maxForFiftyDayTimeSeriesData : maxForFiftyDaySma);

        buildChart(fiftyDayCandleStickChart, finalMaxforFiftyDayTrendDomain, finalMinforFiftyTrendDomain, chartFiftyDaySma, lineFiftyDaySma);
    //***end candle stick chart for Fifty Day trends- Based on Daily Time Series Data***

        //***change the color of the closing price depending on whether it is higher or lower than the 20-day sma***
        var closeForTwentyDayTableTds = document.getElementsByClassName("closeForTwentyDayTable");
        var smaForTwentyDayTableTds = document.getElementsByClassName("smaForTwentyDayTable");

        for (var i = 0; i != closeForTwentyDayTableTds.length; ++i) {
            if (smaForTwentyDayTableTds[i].innerHTML < closeForTwentyDayTableTds[i].innerHTML) {
                closeForTwentyDayTableTds[i].style.color = "lightgreen";
            }
            else {
                closeForTwentyDayTableTds[i].style.color = "red";
            }

        } //***end 20-day sma color change***

            //***start candle stick chart for 20-Day trends- Based on Daily Time Series Data***
    var twentyDayCandleStickChart = [];

    //pulling from 2 properties so must do this way
    @for (int i = 0; i != 100; ++i)
        {
            @:twentyDayCandleStickChart.push({date: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Key', high: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high', low: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.low', open: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.open', close: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close', sma: '@Model.TwentyDaySma.Data.ElementAt(i).Value.Sma'})
        }

        //line for the sma
        var lineTwentyDaySma = d3.line()
            .x(function (d) { return x(d["date"]); })
            .y(function (d) { return y(d["sma"]); });

        var chartTwentyDaySma = d3.select("#twentyDaySmaWithCandleStickChart")
            .append("svg")
            .attr("class", "chart")
            .attr("width", width)
            .attr("height", height);

        //title
        chartTwentyDaySma.append("text")
            .attr("x", (width / 2))
            .attr("y", (margin / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("fill", "white")
            .style("text-decoration", "underline")
            .text("Candle Stick Chart With 20-day Sma");

        //since using 2 datasets find absolute min and max for y domain
        var minForTwentyTimeSeriesData = d3.min(twentyDayCandleStickChart.map(function (x) { return x["low"]; }));
        var maxForTwentyDayTimeSeriesData = d3.max(twentyDayCandleStickChart.map(function (x) { return x["high"]; }));
        var minForTwentySma = d3.min(twentyDayCandleStickChart.map(function (x) { return x["sma"]; }));
        var maxForTwentyDaySma = d3.max(twentyDayCandleStickChart.map(function (x) { return x["sma"]; }));

        var finalMinforTwentyTrendDomain = (minForTwentyTimeSeriesData > minForTwentySma ? minForTwentySma : minForTwentyTimeSeriesData);
        var finalMaxforTwentyDayTrendDomain = (maxForTwentyDayTimeSeriesData > maxForTwentyDaySma ? maxForTwentyDayTimeSeriesData : maxForTwentyDaySma);

        buildChart(twentyDayCandleStickChart, finalMaxforTwentyDayTrendDomain, finalMinforTwentyTrendDomain, chartTwentyDaySma, lineTwentyDaySma);
    //***end candle stick chart for 20-Day trends- Based on Daily Time Series Data***

            //***change the color of the closing price depending on whether it is higher or lower than the 10-day sma***
        var closeForTenDayTableTds = document.getElementsByClassName("closeForTenDayTable");
        var smaForTenDayTableTds = document.getElementsByClassName("smaForTenDayTable");

        for (var i = 0; i != closeForTwentyDayTableTds.length; ++i) {
            if (smaForTenDayTableTds[i].innerHTML < closeForTenDayTableTds[i].innerHTML) {
                closeForTenDayTableTds[i].style.color = "lightgreen";
            }
            else {
                closeForTenDayTableTds[i].style.color = "red";
            }

        } //***end 10-day sma color change***

            //***start candle stick chart for 10-Day trends- Based on Daily Time Series Data***
    var tenDayCandleStickChart = [];

    //pulling from 2 properties so must do this way
    @for (int i = 0; i != 100; ++i)
        {
            @:tenDayCandleStickChart.push({date: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Key', high: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high', low: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.low', open: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.open', close: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close', sma: '@Model.TenDaySma.Data.ElementAt(i).Value.Sma'})
        }

        //line for the sma
        var lineTenDaySma = d3.line()
            .x(function (d) { return x(d["date"]); })
            .y(function (d) { return y(d["sma"]); });

        var chartTenDaySma = d3.select("#tenDaySmaWithCandleStickChart")
            .append("svg")
            .attr("class", "chart")
            .attr("width", width)
            .attr("height", height);

        //title
        chartTenDaySma.append("text")
            .attr("x", (width / 2))
            .attr("y", (margin / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("fill", "white")
            .style("text-decoration", "underline")
            .text("Candle Stick Chart With 10-day Sma");

        //since using 2 datasets find absolute min and max for y domain
        var minForTenTimeSeriesData = d3.min(tenDayCandleStickChart.map(function (x) { return x["low"]; }));
        var maxForTenDayTimeSeriesData = d3.max(tenDayCandleStickChart.map(function (x) { return x["high"]; }));
        var minForTenSma = d3.min(tenDayCandleStickChart.map(function (x) { return x["sma"]; }));
        var maxForTenDaySma = d3.max(tenDayCandleStickChart.map(function (x) { return x["sma"]; }));

        var finalMinforTenTrendDomain = (minForTenTimeSeriesData > minForTenSma ? minForTenSma : minForTenTimeSeriesData);
        var finalMaxforTenDayTrendDomain = (maxForTenDayTimeSeriesData > maxForTenDaySma ? maxForTenDayTimeSeriesData : maxForTenDaySma);

        buildChart(tenDayCandleStickChart, finalMaxforTenDayTrendDomain, finalMinforTenTrendDomain, chartTenDaySma, lineTenDaySma);
    //***end candle stick chart for 10-Day trends- Based on Daily Time Series Data***

        //***change the color of the closing price depending on whether it is higher or lower than the 50-day and 20-day sma***
        var closeFortwentyDayFiftyDayTableTds = document.getElementsByClassName("closeFortwentyDayFiftyDaySmaTable");
        var smaTwentyFortwentyDayFiftyDayTableTds = document.getElementsByClassName("smaTwentyFortwentyDayFiftyDaySmaTable");
        var smaFiftyFortwentyDayFiftyDayTableTds = document.getElementsByClassName("smaFiftyFortwentyDayFiftyDaySmaTable");

        for (var i = 0; i != closeFortwentyDayFiftyDayTableTds.length; ++i) {
            if (smaTwentyFortwentyDayFiftyDayTableTds[i].innerHTML < closeFortwentyDayFiftyDayTableTds[i].innerHTML) {
                smaTwentyFortwentyDayFiftyDayTableTds[i].style.color = "lightgreen";
            }
            else {
                smaTwentyFortwentyDayFiftyDayTableTds[i].style.color = "red";
            }
        }
            for (var i = 0; i != closeFortwentyDayFiftyDayTableTds.length; ++i) {
                if (smaFiftyFortwentyDayFiftyDayTableTds[i].innerHTML < closeFortwentyDayFiftyDayTableTds[i].innerHTML) {
                    smaFiftyFortwentyDayFiftyDayTableTds[i].style.color = "lightgreen";
                }
                else {
                    smaFiftyFortwentyDayFiftyDayTableTds[i].style.color = "red";
                }

        } //***end 50-day and 20-day sma color change***

                //***start candle stick chart for 50-Day 20-Day trends- Based on Daily Time Series Data***
            var twentyDayFiftyDayCandleStickChart = [];

    //pulling from 2 properties so must do this way
    @for (int i = 0; i != 100; ++i)
        {
            @:twentyDayFiftyDayCandleStickChart.push({date: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Key', high: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.high', low: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.low', open: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.open', close: '@Model.DailyTimeSeriesData.Data.ElementAt(i).Value.close', sma1: '@Model.FiftyDaySma.Data.ElementAt(i).Value.Sma', sma2: '@Model.TwentyDaySma.Data.ElementAt(i).Value.Sma'})
        }

        //line for the sma
        var lineFiftyDaySma1 = d3.line()
            .x(function (d) { return x(d["date"]); })
        .y(function (d) { return y(d["sma1"]); });

        var lineTwentyDaySma2 = d3.line()
            .x(function (d) { return x(d["date"]); })
            .y(function (d) { return y(d["sma2"]); });

        var chartTwentyDayFiftyDaySma = d3.select("#twentyDayFiftyDaySmaWithCandleStickChart")
            .append("svg")
            .attr("class", "chart")
            .attr("width", width)
            .attr("height", height);

        //title
        chartTwentyDayFiftyDaySma.append("text")
            .attr("x", (width / 2))
            .attr("y", (margin / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("fill", "white")
            .style("text-decoration", "underline")
            .text("Candle Stick Chart With 50-day (blue) and 20-day (orange) Sma");

        //since using 2 datasets find absolute min and max for y domain
        var minForTwentyDayFiftyDayTimeSeriesData = d3.min(twentyDayFiftyDayCandleStickChart.map(function (x) { return x["low"]; }));
        var maxForTwentyDayFiftyDayTimeSeriesData = d3.max(twentyDayFiftyDayCandleStickChart.map(function (x) { return x["high"]; }));
        var minForFiftyDaySma1 = d3.min(twentyDayFiftyDayCandleStickChart.map(function (x) { return x["sma1"]; }));
        var maxForFiftyDaySma1 = d3.max(twentyDayFiftyDayCandleStickChart.map(function (x) { return x["sma1"]; }));
        var minForTwentyDaySma2 = d3.min(twentyDayFiftyDayCandleStickChart.map(function (x) { return x["sma2"]; }));
        var maxForTwentyDaySma2 = d3.max(twentyDayFiftyDayCandleStickChart.map(function (x) { return x["sma2"]; }));

        //CHANGE THE BELOW SO THAT IT TAKES THE LOWER/HIGHER OUT OF BOTH THE 20 AND 50 DAY SMA
        var lowerMinOutOfTwentyAndFifty = (minForTwentyDaySma2 > minForFiftyDaySma1 ? minForFiftyDaySma1 : minForTwentyDaySma2);
        var higherMaxOutOfTwentyAndFifty = (maxForFiftyDaySma1 > maxForTwentyDaySma2 ? maxForFiftyDaySma1 : maxForTwentyDaySma2);

        var finalMinforTwentyDayFiftyDayTrendDomain = (lowerMinOutOfTwentyAndFifty > minForTwentyDayFiftyDayTimeSeriesData ? minForTwentyDayFiftyDayTimeSeriesData : lowerMinOutOfTwentyAndFifty);
        var finalMaxforTwentyDayFiftyDayTrendDomain = (higherMaxOutOfTwentyAndFifty > maxForTwentyDayFiftyDayTimeSeriesData ? higherMaxOutOfTwentyAndFifty : maxForTwentyDayFiftyDayTimeSeriesData);

        buildChartTwoLines(twentyDayFiftyDayCandleStickChart, finalMaxforTwentyDayFiftyDayTrendDomain, finalMinforTwentyDayFiftyDayTrendDomain, chartTwentyDayFiftyDaySma, lineFiftyDaySma1, lineTwentyDaySma2);
    //***end candle stick chart for 50-Day 20-Day trends- Based on Daily Time Series Data***

    //***Misc functions used in the chart below
    function min(a, b) { return a < b ? a : b; }

    function max(a, b) { return a > b ? a : b; }
    //end Misc functions

    //***Start of Candle Stick Chart With SMA
    //added 4 parameters of maxForDomain, minForDomain, canvas, smaLine so that my graph could be reusable. See my saved candlesStickChart w/ sma for the difference beyween the 2
    function buildChart(data, maxForDomain, minForDomain, canvas, smaLine) {

        data.forEach(function (d) {
            d.date = new Date(d.date);
            d.high = +d.high;
            d.low = +d.low;
            d.open = +d.open;
            d.close = +d.close;
            d.sma = +d.sma;
        });

        //map is going to create an array with all the lows and then d3.min will take the min out of all of them
        //y.domain([d3.min(data.map(function (x) { return x["low"]; })), d3.max(data.map(function (x) { return x["high"]; }))])
        y.domain([minForDomain, maxForDomain])
        console.log(minForDomain);
        console.log(maxForDomain);

        x.domain(d3.extent(data, function (d) { return d["date"]; }))

        // y1.domain(d3.extent(68, d3.max(data, function (d) { return d["sma"]; })))

        //grid for the chart; x and y axis
        canvas.selectAll("line.x")
            .data(x.ticks(10))
            .enter().append("line")
            .attr("class", "x")
            .attr("x1", x)
            .attr("x2", x)
            .attr("y1", margin)
            .attr("y2", height - margin)
            .attr("stroke", "#ccc");
        canvas.selectAll("line.y")
            .data(y.ticks(10))
            .enter().append("line")
            .attr("class", "y")
            .attr("x1", margin)
            .attr("x2", width - margin)
            .attr("y1", y)
            .attr("y2", y)
            .attr("stroke", "#ccc");

        //x axis
        canvas.append("g")
            .attr("transform", "translate(0," + 450 + ")") //need to change this 450 to a variable- it is how far down the axis will go
            .attr("class", "xrule")   // give it a class so it can be used to select only xaxis labels  or change color
            .call(d3.axisBottom(x))   //.call(d3.axisBottom(x).ticks(5)) to change ticks- by default it is 10
            .selectAll("text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("transform", function (d) {
                return "rotate(-65)"
            });

        //the y axis
        canvas.selectAll("text.yrule")
            .data(y.ticks(10))
            .enter()
            .append("text")
            .attr("class", "yrule")
            .attr("x", 0)
            .attr("y", y)
            .attr("dy", 0)
            .attr("dx", 20)
            .attr("text-anchor", "middle")
            .text(String);

        //add rectangles- if open higher then close then red
        canvas.selectAll("rect")
            .data(data)
            .enter().append("rect")
            .attr("x", function (d) { return x(d["date"]); })
            .attr("y", function (d) { return y(max(d["open"], d["close"])); })
            .attr("height", function (d) { return y(min(d["open"], d["close"])) - y(max(d["open"], d["close"])); })
            .attr("width", function (d) { return 0.5 * (width - 2 * margin) / data.length; })
            .attr("fill", function (d) { return d["open"] > d["close"] ? "red" : "green"; });

        //add a stem to the rectangle: we add a line and give it a class name of stem; the stem will rep the open and close; open higher then close then red
        canvas.selectAll("line.stem")
            .data(data)
            .enter().append("line")
            .attr("class", "stem")
            .attr("x1", function (d) { return x(d["date"]) + 0.25 * (width - 2 * margin) / data.length; })
            .attr("x2", function (d) { return x(d["date"]) + 0.25 * (width - 2 * margin) / data.length; })
            .attr("y1", function (d) { return y(d["high"]); })
            .attr("y2", function (d) { return y(d["low"]); })
            .attr("stroke", function (d) { return d.open > d.close ? "red" : "green"; });

        canvas.append("path")
            .data([data])
            .attr("d", smaLine)
            .attr("class", "line")
            .style("stroke", "royalblue")
            .attr("fill", "none")
            .attr("stroke-width", 2);
    } //***End of Candle Stick Chart With SMA

    //***Start of Candle Stick Chart With Two Lines
    function buildChartTwoLines(data, maxForDomain, minForDomain, canvas, smaLine, smaLine2) {

        data.forEach(function (d) {
            d.date = new Date(d.date);
            d.high = +d.high;
            d.low = +d.low;
            d.open = +d.open;
            d.close = +d.close;
            d.sma = +d.sma;
        });

        //map is going to create an array with all the lows and then d3.min will take the min out of all of them
        //y.domain([d3.min(data.map(function (x) { return x["low"]; })), d3.max(data.map(function (x) { return x["high"]; }))])
        y.domain([minForDomain, maxForDomain])
        console.log(minForDomain);
        console.log(maxForDomain);

        x.domain(d3.extent(data, function (d) { return d["date"]; }))

        // y1.domain(d3.extent(68, d3.max(data, function (d) { return d["sma"]; })))

        //grid for the chart; x and y axis
        canvas.selectAll("line.x")
            .data(x.ticks(10))
            .enter().append("line")
            .attr("class", "x")
            .attr("x1", x)
            .attr("x2", x)
            .attr("y1", margin)
            .attr("y2", height - margin)
            .attr("stroke", "#ccc");
        canvas.selectAll("line.y")
            .data(y.ticks(10))
            .enter().append("line")
            .attr("class", "y")
            .attr("x1", margin)
            .attr("x2", width - margin)
            .attr("y1", y)
            .attr("y2", y)
            .attr("stroke", "#ccc");

        //x axis
        canvas.append("g")
            .attr("transform", "translate(0," + 450 + ")") //need to change this 450 to a variable- it is how far down the axis will go
            .attr("class", "xrule")   // give it a class so it can be used to select only xaxis labels  or change color
            .call(d3.axisBottom(x))   //.call(d3.axisBottom(x).ticks(5)) to change ticks- by default it is 10
            .selectAll("text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("transform", function (d) {
                return "rotate(-65)"
            });

        //the y axis
        canvas.selectAll("text.yrule")
            .data(y.ticks(10))
            .enter()
            .append("text")
            .attr("class", "yrule")
            .attr("x", 0)
            .attr("y", y)
            .attr("dy", 0)
            .attr("dx", 20)
            .attr("text-anchor", "middle")
            .text(String);

        //add rectangles- if open higher then close then red
        canvas.selectAll("rect")
            .data(data)
            .enter().append("rect")
            .attr("x", function (d) { return x(d["date"]); })
            .attr("y", function (d) { return y(max(d["open"], d["close"])); })
            .attr("height", function (d) { return y(min(d["open"], d["close"])) - y(max(d["open"], d["close"])); })
            .attr("width", function (d) { return 0.5 * (width - 2 * margin) / data.length; })
            .attr("fill", function (d) { return d["open"] > d["close"] ? "red" : "green"; });

        //add a stem to the rectangle: we add a line and give it a class name of stem; the stem will rep the open and close; open higher then close then red
        canvas.selectAll("line.stem")
            .data(data)
            .enter().append("line")
            .attr("class", "stem")
            .attr("x1", function (d) { return x(d["date"]) + 0.25 * (width - 2 * margin) / data.length; })
            .attr("x2", function (d) { return x(d["date"]) + 0.25 * (width - 2 * margin) / data.length; })
            .attr("y1", function (d) { return y(d["high"]); })
            .attr("y2", function (d) { return y(d["low"]); })
            .attr("stroke", function (d) { return d.open > d.close ? "red" : "green"; });

        canvas.append("path")
            .data([data])
            .attr("d", smaLine)
            .attr("class", "line")
            .style("stroke", "royalblue")
            .attr("fill", "none")
            .attr("stroke-width", 2);

        canvas.append("path")
            .data([data])
            .attr("d", smaLine2)
            .attr("class", "line")
            .style("stroke", "orange")
            .attr("fill", "none")
            .attr("stroke-width", 2);
    } //***End of Candle Stick Chart With Two Lines

</script>
